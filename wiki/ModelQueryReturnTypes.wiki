=Alternate Result Types=

Up to this point, all query results have come back as sets of
Model objects.  However, there are a few different ways to get
result sets from the query handler.  Each of these functions can
be called on a !QueryFilter object to immediately execute a query
and return results in the corresponding format.

==Hash Arrays==

!QueryFilter::hash()

The most common alternative result type is hash arrays.  Rather
than build a model object for each result, it simply returns
and array of field => value pairs.

Benefits:
  * Slightly more efficient than returning Model objects
  * Still does type conversion for field values

Disadvantages:
  * Loses related object traversal - relation fields will only contain primary keys, not the related object itself
  * No simple way to save() or delete() the object

Example:

{{{
$films = $fq->all()->hash();
// Returns a result set in the format:
// array(
//       [0] => array(
//               'id' => 1,
//               'title' => 'Ocean\'s 11',
//               'director' => 1,
//               'nominated' => false
//               )
//       [1] => ...
//       ...
//      );
}}}

==Raw Hash Arrays==

!QueryFilter::raw()

Raw hash arrays are identical in behavior to regular hash arrays,
except that no type conversion is done from the database.

Benefits:
  * Squeezes every last bit of performance out of ModelQuery

Disadvantages:
  * Loses related object traversal - relation fields will only contain primary keys, not the related object itself
  * No simple way to save() or delete() the object
  * Loses type conversion - things like date objects will come back from the database as strings

==Model Cursors==

!QueryFilter::cursor()

A cursor is a pointer that allows you to iterate through results
from the database one at a time, without loading the entire set
into memory at once.  It returns a
[http://jongsma.org/software/modelquery/docs/phpdoc/modelquery/CursorIterator.html CursorIterator]
object, which can be treated like an array in foreach loops, but only loads
records one at a time as they are accessed.

Benefits:
  * Lower memory usage for large queries

Disadvantages:
  * Keeps the connection to the database open longer

Example:

{{{
$films = $fq->all()->cursor();

foreach ($films as $film) {
    // Each $film is still a Model object, but they are only
    // loaded one at a time as we iterate through the results
}
}}}

==Hash Cursors==

!QueryFilter::hashCursor()

This behaves identically to cursor(), except that each item
return is a hash array (as in hash()) rather than a Model object.

Benefits:
  * Slightly more efficient than returning Model objects
  * Still does type conversion for field values
  * Lower memory usage for large queries

Disadvantages:
  * Loses related object traversal - relation fields will only contain primary keys, not the related object itself
  * No simple way to save() or delete() the object
  * Keeps the connection to the database open longer

Still looking for more info?  Browse through some more
[ModelQueryAdvanced advanced ModelQuery usage examples].
