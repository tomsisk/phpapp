=Configuring !ModelAdmin Definitions=

Back in step 2, we [PHPAppModules created a bare-bones films module].
Right now, this module just consists of a _models/_ directory
containing the Film models we created in the
[ModelQueryTutorial ModelQuery tutorial].

In order for PHPApp to generate a user-friendly interface for
these models, we need to provide some additional metadata
about the models.  We do this by creating _!ModelAdmin definitions_
in the module's _admin_ subdirectory:

`films/admin/FilmAdmin.class.php`:
{{{
require_once('phpapp-core/ModelAdmin.class.php');

class FilmAdmin extends ModelAdmin {

    public function __construct($model, $module) {

        parent::__construct($model, $module);
        $this->setName('Film');
        $this->setDescription('Edit film records');
        $this->setIcon($module->getMediaURL('film.png'));

        // Fields to display in the model index view
        $this->setDisplayFields(array('title', 'released', 'director.name'))

        // Fields to display as available search filters in the sidebar
        $this->setFilterFields(array('released', 'nominated'));

        // Fields to query for searches
        $this->setSearchFields(array('title'));

        // Set a field display option for the actors list
        $this->setFieldOption('actors', 'style', 'multilist')

        // By default, all fields will be displayed on the form,
        // in one table.  If you want to customize displayed
        // fields or groupings, you can use the following method
        $this->setFieldGroups(array(
                array('name' => null, // No group heading
                    'fields' => array('title', 'released', 'nominated')),
                array('name' => 'Credits', // No group heading
                    'fields' => array('director', 'actors'))
            ));

    }

}
}}}

Let's look at some of these directives in more detail:

  * `ModelAdmin::setName($name, $plural = null)`: Sets the human-readable name of the model.  This should be a singular name, since PHPApp attempts to automatically pluralize model names in certain situations.  If your model name isn't accounted for by the usual pluralization rules, you can pass an (optional) second parameter containing the plural name.
  * `ModelAdmin::setDescription($desc)`: A longer-form description of the model.
  * `ModelAdmin::setIcon($url)`: Set an icon that the admin site will use to represent the model.
  * `ModelAdmin::setDisplayFields($ary)`: A list of field columns that will be shown in the table when listing available objects.
  * `ModelAdmin::setSearchFields($ary)`: A list of fields that will be checked when searching for objects.
  * `ModelAdmin::setFilterFields($ary)`: A list of fields that will be shown in the sidebar on the object list view as available filters.  Since PHPApp will attempt to display all unique values as filters for these fields, it is not a good idea to use filter fields that have a wide range of unique values.
  * `ModelAdmin::setFieldOption($field, $option, $value)`: Set a field-specific option. See [PHPAppFieldOptions Field-Specific Options] for more details.
  * `ModelAdmin::setFieldGroups($groups)`: Manually specify the fields to display on the edit form, and arrange them in groups.

There are many more options available to !ModelAdmin definitions, which
you can learn about in [PHPAppAdvancedModelAdmin Advanced ModelAdmin Configuration],
but these options are sufficient for this example.

Let's create the remaining !ModelAdmin definitions:

`films/admin/ActorAdmin.class.php`:
{{{
require_once('phpapp-core/ModelAdmin.class.php');

class ActorAdmin extends ModelAdmin {

    public function __construct($model, $module) {

        parent::__construct($model, $module);
        $this->setName('Actor');
        $this->setDescription('Edit actor records');
        $this->setIcon($module->getMediaURL('actor.png'));

        $this->setDisplayFields(array('name'));
        $this->setSearchFields(array('name'));
    
    }
}
}}}

`films/admin/DirectorAdmin.class.php`:
{{{
require_once('phpapp-core/ModelAdmin.class.php');

class DirectorAdmin extends ModelAdmin {

    public function __construct($model, $module) {

        parent::__construct($model, $module);
        $this->setName('Director');
        $this->setDescription('Edit director records');
        $this->setIcon($module->getMediaURL('director.png'));

        $this->setDisplayFields(array('name'));
        $this->setSearchFields(array('name'));

        // Not interested in displaying many-to-many 'films' field on form
        $this->setFieldGroups(array(
                array('name' => null,
                    'fields' = array('name'))
            ));
    
    }
}
}}}

Now that we have our !ModelAdmin definitions created, we need to link
them to the corresponding models in the module's configuration file:

`films/module.php`:
{{{
<?php
// Human-readable name for the module
$module->name = 'Films';

// Add a new modules to the admin site
// Param 1 = Model name, param 2 = ModelAdmin definition
$module->addModel('Film', 'FilmAdmin');
$module->addModel('Actor', 'ActorAdmin');
$module->addModel('Director', 'DirectorAdmin');
}}}

Once you have this new module configured, drop it into your application's
`modules` directory, and make sure it is added to `$config['modules']` in
your application's configuration file.

Open your admin site and login.  You should now see a new "Films" module
in the sidebar.  Take a look around and notice how PHPApp creates different
input fields depending on the Model's field type.

For an application as basic as this one, we're now done.  We can start
using the admin site for data entry, and can focus on building the public
web site with the help of our Application object.

==Completed Module Structure==

Now that we've completed our module configuration, the module
directory has the following structure.  Double check that yours
looks the same:

{{{
films
 |- module.php
 |- models
 | |- Actor.class.php
 | |- Director.class.php
 | |- Film.class.php
 | \- FilmActor.class.php
 |- admin
 | |- ActorAdmin.class.php
 | |- DirectorAdmin.class.php
 | \- FilmAdmin.class.php
 \- media
   |- actor.png
   |- director.png
   \- film.png
}}}

==Advanced Configuration==

Many applications will have more complex needs.  Although PHPApp tries to
do the smart thing automatically, it is also very extendable if you run
into something that doesn't fit your needs.  Extending PHPApp is covered
in the advanced topics below:

  * [PHPAppAdvancedModelAdmin Advanced ModelAdmin Configuration]
    * [PHPAppFieldOptions Field-Specific Options]
    * [PHPAppActionHooks Adding Action Hooks]
    * [PHPAppActionHandlers Creating Custom Actions]
  * [PHPAppCustomTemplates Customizing the Interface Templates]
    * [PHPAppCustomFields Templates for Custom Model Fields]
