=Extending !ModelAdmin: Custom Actions and Action Hooks

==How Requests are Process==

In order to extend !ModelAdmin with action hooks or custom actions, you will
need to understand how a request is processed by PHPApp.

When PHPApp's admin controller receives a request:

{{{
GET /modules/films/film/edit/12
}}}

it splits it into chunks for processing.  The following are steps are
what would happen with this request:

  # /modules identifies it as a module content request
  # The app finds the "films" module, and calls Module::execute() on it with the remaining path portion ('film/edit/12')
  # Module::execute() finds the "film" !ModelAdmin definition, and calls `ModelAdmin::execute()` with the remaining path ('edit/12')
  # !ModelAdmin tries to find an appropriate action handler for the path specified ('edit')
  # If there are any pre-execution hooks for the action, !ModelAdmin executes them
  # If an action handler is found, module executes the action handler, passing any remaining path portion to it as an object ID
  # If there are any post-execution hooks for the action, !ModelAdmin executes them

The key to adding additional functionality to PHPApp is by registering
_custom actions_ and _action hooks_ in a !ModelAdmin definition. All actions
and action hooks must be functions with the following signature:

{{{
public function myAction($id, $params, $modeladmin, $method);
}}}

Parameters:
  # *$id*: The object id passed from the request path
  # *$params*: Any query string parameters from the request, as a name => value array
  # *$modeladmin*: The !ModelAdmin definition that is calling the action
  # *$method*: The HTTP method of the request (GET, POST, etc)

Return Value: The return value of your action is a string specifying
the URL you want to redirect to (useful functions to help you generate
a redirect URL:
[http://home.jongsma.org/software/phpapp/docs/phpdoc/phpapp-core/ModelAdmin.html#relativeUrl ModelAdmin::relativeUrl()],
[http://home.jongsma.org/software/phpapp/docs/phpdoc/phpapp-core/Module.html#relativeUrl Module::relativeUrl()].)

==Default Actions==

ModelAdmin has a set of default action handlers that are used to generate
the admin interface.  These are useful to know so that you can use
the built-in handlers as a fallback mechanism in your own custom actions:

|| Action || Handler ||
|| (default) || StockActions::showObjectList() ||
|| add || StockActions::doObjectAdd() ||
|| addpopup || StockActions::doObjectAddPopup() ||
|| autocomplete || StockActions::doObjectAutocomplete() ||
|| delete || StockActions::doObjectDelete() ||
|| deleteconfirm || StockActions::showObjectDeleteConfirm() ||
|| edit || StockActions::doObjectEdit() ||
|| export || StockActions::exportObjectList() ||
|| filter || StockActions::showObjectFilter() ||
|| import || StockActions::doObjectImport() ||
|| validateimport || StockActions::validateObjectImport() ||
|| verifyimport || StockActions::verifyObjectImport() ||
|| save || StockActions::doObjectSave() ||
|| saved || StockActions::showObjectSaved() ||
|| savejs || StockActions::doObjectSaveJSON() ||
|| savepopup || StockActions::doObjectSavePopup() ||
|| searchjs || StockActions::doObjectSearchJSON() ||
|| listupdatejs || StockActions::doObjectListUpdateJSON() ||
|| validate || StockActions::doObjectValidateJSON() ||
|| view || StockActions::doObjectView() ||

==Custom Actions==

Creating a custom action is simple: just all `ModelAdmin::registerActionHandler()`.

{{{
class FilmAdmin extends ModelAdmin {

	public __construct($model, $module) {

		// Configure model admin

		// Register a custom handler
		$this->registerActionHandler('custom', array($this, 'customHandler'));

	}

	public customHandler($id, $params, $modeladmin, $method) {

		// Do your custom action here

		// Then redirect to the main model list
		return $modeladmin->relativeUrl('/');

	}

}
}}}

Parameters
  # *$action*: The action name.
  # *$function: The function handler.  This can be a function name, or an array specifying an object instance and member function to call.
 
After defining this custom handler, it would be called by the following request:

{{{
GET /modules/films/film/custom/12
}}}

==Action Hooks==

In addition to creating custom actions, you can also add pre-execution or
post-execution hooks to existing actions.

===Pre-Execution Hooks===

Pre-execution hooks can be useful for:
  * Setting field defaults before adding an object when complex logic is required
  * Adding custom context variables when using a [PHPAppCustomTemplates custom template]

The function signature for pre-execution hooks is the same as for actions:

{{{
public function myAction($id, $params, $modeladmin, $method);
}}}

One important thing to note: since it is executed before the action,
you can modify the contents of the request before the action gets it by
updating the $params array.

===Pre-Execution Hooks===

Post-execution hooks can be useful for:
  * Creating triggers that executed business logic after a model is saved
  * Processing fields from a custom template that are not handled by the default save action
  * Removing references to objects in remote systems after a successful delete

The function signature for pre-execution hooks is the same as for actions:

{{{
public function myAction($id, $params, $modeladmin, $method);
}}}
