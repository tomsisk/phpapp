=Configuring Modules=

Back in step 2, we [PHPAppModules created a bare-bones films module].
Right now, this module just consists of a _models/_ directory
containing the Film models we created in the
[ModelQueryTutorial ModelQuery tutorial].

In order for PHPApp to generate a user-friendly interface for
these models, we need to provide some additional metadata
about the models.  We do this by creating _!ModelAdmin definitions_
in the module's _admin_ subdirectory:

`films/admin/FilmAdmin.class.php`:
{{{
require_once('phpapp-core/ModelAdmin.class.php');

class FilmAdmin extends ModelAdmin {

    public function __construct($model, $module) {

        parent::__construct($model, $module);
        $this->setName('Film');
        $this->setDescription('Edit film records');
        $this->setIcon($module->getMediaURL('film.png'));

        // Fields to display in the model index view
        $this->setDisplayFields(array('title', 'released', 'director.name'))

        // Fields to display as available search filters in the sidebar
        $this->setFilterFields(array('released', 'nominated'));

        // Fields to query for searches
        $this->setSearchFields(array('title'));

        // Set a field display option for the actors list
        $this->setFieldOption('actors', 'style', 'multilist')

        // By default, all fields will be displayed on the form,
        // in one table.  If you want to customize displayed
        // fields or groupings, you can use the following method
        $this->setFieldGroups(array(
                array('name' => null, // No group heading
                    'fields' => array('title', 'released', 'nominated')),
                array('name' => 'Credits', // No group heading
                    'fields' => array('director', 'actors'))
            ));

    }

}
}}}

Let's look at some of these directives in more detail:



Now let's create the remaining !ModelAdmin definitions:

`films/admin/ActorAdmin.class.php`:
{{{
require_once('phpapp-core/ModelAdmin.class.php');

class ActorAdmin extends ModelAdmin {

    public function __construct($model, $module) {

        parent::__construct($model, $module);
        $this->setName('Actor');
        $this->setDescription('Edit actor records');
        $this->setIcon($module->getMediaURL('actor.png'));

        $this->setDisplayFields(array('name'));
        $this->setSearchFields(array('name'));
    
    }
}
}}}

`films/admin/DirectorAdmin.class.php`:
{{{
require_once('phpapp-core/ModelAdmin.class.php');

class DirectorAdmin extends ModelAdmin {

    public function __construct($model, $module) {

        parent::__construct($model, $module);
        $this->setName('Director');
        $this->setDescription('Edit director records');
        $this->setIcon($module->getMediaURL('director.png'));

        $this->setDisplayFields(array('name'));
        $this->setSearchFields(array('name'));

        // Not interested in displaying many-to-many 'films' field on form
        $this->setFieldGroups(array(
                array('name' => null,
                    'fields' = array('name'))
            ));
    
    }
}
}}}

Now that we have our !ModelAdmin definitions created, we need to link
them to the corresponding models in the module's configuration file:

`films/module.php`:
{{{
<?php
// Human-readable name for the module
$module->name = 'Films';
// Add a new modules to the admin site
// Param 1 = Model name, param 2 = ModelAdmin definition
$module->addModel('Film', 'FilmAdmin');
$module->addModel('Actor', 'ActorAdmin');
$module->addModel('Director', 'DirectorAdmin');
}}}

