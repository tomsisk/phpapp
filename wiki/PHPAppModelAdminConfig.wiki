=!ModelAdmin Configuration Reference=

Basic model administration configuration was covered previously in
[PHPAppModelAdmin Configuring ModelAdmin Definitions], but !ModelAdmin
has many more options available.

==Configuration Directives==

===Properties===
|| Property || Default || Description ||
|| *allowImport* || true || If TRUE, allow users to import records for this model from CSV. ||
|| *allowExport* || true || If TRUE, allow users to export queries for this model to CSV. ||
|| *boundTo* || null || Similar to *parent*, but in addition to redirecting after save, it also intercepts edit requests and forces them to go the the parent's edit form. ||
|| *deleteConfirm* || false || If TRUE, adds an intermediary page that forces the user to explicitly confirm any object deletions for the current model.  Normal behavior is to just use a popup prompt.  This setting is useful to avoid accidental deletions of critical objects (like customer accounts). ||
|| *inlineOnly* || false || If TRUE, this model will only be edited inline as a dependent object of another model, and will not show up in the sidebar. ||
|| *instructions* || null || Instructions for filling out the form for this model.  Will be parsed as PHP code to provide access to the object being edited. ||
|| *paginated* || true || If TRUE, PHPApp will paginate the query results in the object list view. ||
|| *parent* || null || Identifies a "parent" field this this model is a dependent child of.  If the model is also specified as *$inlineOnly*, PHPApp will go back to the edit form of the parent object on save. ||
|| *previewUrl* || null || A URL to view this object on the public website.  Will be parsed as PHP code (<?= $object->id ?> will be helpful.) ||
|| *queryFilter * || null || A `field => value` hash array specifiying filters to pass to ModelQuery when creating the object list view. ||
|| *readonly* || false || If TRUE, instances of this model will only be viewable. ||
|| *saveAndAdd* || false || If TRUE, display a "Save and Add New" button on the edit form. ||
|| *saveNew* || false || If TRUE, display a "Save As New" button on the edit form. ||
|| *sortable* || false || If TRUE, PHPApp will look for a model-global !OrderedField() (i.e. with no grouping fields), and the object list view will allow for drag-and-drop reordering of objects. || 
|| *templateContext* || !PhpAppTemplateContext object || A !PhpAppTemplateContext object.  To add context variables accessible by this model's user interface templates, try `$this->templateContext->context['name'] = 'value';` ||

===Methods===
|| Method || Description ||
|| *addInlineObject*(_$field_) || Designate a relation field as an inline object, that will be edited on the same form as this model. ||
|| *addQueryFilter*(_$field_, _$value_) || Add a filter to limit the results shown on the object list view.  This just adds a filter to the $queryFilters property documented above. ||
|| *mergeWith*(_$field_) || Designate a relation field as a one-to-one relation whose fields should be displayed on the form as if they belonged to the current model. ||
|| *setDisplayFields*(_$fields_) || An array of field names to display as columns in the object list view. ||
|| *setFieldOption*(_$field_, _$option_, _$value_) || Set a field specific option.  For a list of common options, see [PHPAppModelAdminConfig#Field-Specific_Options Field-Specific Options] ||
|| *setFieldRestriction*(_$field_, _$value_, _$permission_) || Restrict the use of a value to users with the specified permission.  i.e. `$this->addFieldRestriction('internal', true, 'ADMIN');` only allows users with the ADMIN permission to set `$object->internal = true;`  The special value constant `CHANGE_ONLY` can be used to restrict anyone from changing an existing value unless they have the specified permission. ||
|| *setFieldTemplate*(_$field_, _$template_, _$context_) || Specify a custom field rendering template for the given field, rather than using the default field template from `phpapp-core/templates/fields/*`. ||
|| *setFilterFields*(_$fields_) || An array of field names to show as query filters in the sidebar of the object list view.  Note that PHPApp attempts to display all available unique values for a filter field, so it is not a good idea to choose filter fields that have a large number of unique values. ||
|| *setModelAccess*(_$field_, _$userpath_) || Limit query results by the specified field filter.  _$field_ is the field name to filter by, and _$userpath_ is a dot-notation field path, starting from the logged-in User object, specifying the value it must match.  i.e.: `$this->setModelAccess('customer', 'customer');` would require that the model's "customer" field match `$user['customer']` for the logged-in user. ||
|| *setSearchFields*(_$fields_) || An array of field names to compare to when searching for objects. ||
|| *setFieldGroups*(_$groups_) || A list of fields to display, along with their groupings.  If omitted, PHPApp will display all model fields in a single table.  See [http://home.jongsma.org/software/phpapp/docs/phpdoc/phpapp-core/ModelAdmin.html#setFieldGroups ModelAdmin::setFieldGroups()] for the parameter format. ||


===Field-Specific Options===

`ModelAdmin::setFieldOption()` can have various values depending on the type
of field you are configuring.

Usage:
{{{
$this->setFieldOption($field, $option, $value);
}}}

_All Fields_

|| $option || Default || Description ||
|| *displayConditions* || null || Sets rules that determine when this field should be visible on the editing form.  Option value is identical to the _displayConditions_ group option in [http://home.jongsma.org/software/phpapp/docs/phpdoc/phpapp-core/ModelAdmin.html#setFieldGroups ModelAdmin::setFieldGroups()] ||
|| *help* || null || Descriptive help text for filling out this field. ||
|| *hidden* || false || Designate this field as a hidden.  It can be set from a request parameter, but will not be displayed on the form. ||
|| *passedValue* || false || Similar to *hidden*, except that it will display the field as a read-only value on the form. ||
|| *readonly* || false || Set this field to read-only. ||

_!ArrayField_

|| $option || Default || Description ||
|| *style* || default || The display style.  Possible values: default, checkbox, multilist, combolist ||
|| *ordered* || false || Allow drag-and-drop reordering of field values. ||

_HTMLField_

|| $option || Default || Description ||
|| *style* || default || The display style.  Possible values: default, large ||

_!ManyToManyField_

|| $option || Default || Description ||
|| *style* || default || The display style.  Possible values: default, multilist, combolist, checkbox ||
|| *groupby* || null || The field to sort and group by when displaying headings.  Only applicable for `style = checkbox`. ||
|| *groupheadings* || null || A `name => value` array of group headings, keyed by possible values of the *groupby* field. ||

_!ManyToOneField_

|| $option || Default || Description ||
|| *style* || default || The display style.  Possible values: default, radio, searchlist ||
|| *nullLabel* || 'None' || A custom string label to display for the null value (if null is allowed.) ||
